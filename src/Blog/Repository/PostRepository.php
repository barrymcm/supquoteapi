<?php

namespace Blog\Repository;

use Doctrine\ORM\EntityRepository;
use Blog\Application;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
	
	/**
	 * Finds all posts
	 * 
	 * @return array
	 */
	public function findAllPosts()
	{
		$results = $this->findAll();
		
		foreach ($results as $result) {	
			$posts[] = array(
				'id' => $result->getId(),
			 	'title' => htmlspecialchars($result->getTitle()),
				'body' => $result->getBody(),
				'publicationDate' => $result->getPublicationDate()->format('Y-m-d H:i:s'),
				'comments' => $comments,
				'tags' => $result->getTags(),
				'author' => $result->getAuthor()
			);
		}
		return $posts;
	}
	

	/**
	* 
	* Finds a post with its comments
	*
	* @param int $id
	* @return Post
	*/
	public function findPostWithComments($id)
	{
		$result = $this->createQueryBuilder('p')
						   ->addSelect('c')
						   ->leftJoin('p.comments', 'c')
						   ->where('p.id = :id')
						   ->orderBy('c.publicationDate', 'ASC')
						   ->setParameter('id', $id)
						   ->getQuery()
						   ->getOneOrNullResult();
		
		$post = array(
			'title' => $result->getTitle(),
			'body' => $result->getBody(),
			'publicationDate' => $result->getPublicationDate()->format('Y-m-d H:i:s'),
			'comments' => $result->getComments(),
			'tags' => $result->getTags(),
			'author' => $result->getAuthor()
		);

		return $post;
	}

	/**
	* 
	* Finds a posts with its tags
	*
	* @param string[] $tagNames
	* @return Post[]
	*/
	public function findPostWithTags(array $tagNames)
	{
		return $this->createQueryBuilder('p') 			// Alias for Post
						->addSelect('t') 					// select * from Tag
						->addSelect('COUNT(c.id)')			
						->leftJoin('p.comments', 'c')		
						->join('p.tags', 't')				 
						->where('t.name IN(:tagNames)')
						->groupBy('p.id')
						->having('COUNT(t.name) >= :numberOfTags')
						->setParameter('tagNames', $tagNames)
						->setParameter('numberOfTags',count($tagNames))
						->getQuery()
						->getResult();
	}

	/**
	* Finds posts with comment count
	*
	* @return array
	*/
	public function findPostWithCommentCount()
	{
		return $this->createQueryBuilder('p')
						->leftJoin('p.comments', 'c')
						->addSelect('COUNT(c.id)')
						->groupBy('p.id')
						->getQuery()
						->getResult();
	}
}
