<?php

namespace Blog\Repository;

use Blog\Application;
use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
	/**
	 * [findAllProducts - finds all products]
	 * @return [array]
	 */
	public function findAllProducts()
	{
		$app = new Application();
		$results = $this->findAll();

		if(!$results) {
			throw new \Exception("There are no products");
		}

		foreach($results as $result)
		{
			$products[$result->getId()] = [
				'id' => $result->getId(),
				'companyId' => $result->getCompanyId(),
				'categoryId' => $result->getCategoryId(),
				'name' => $result->getName(),
				'description' => $result->getDescription(),
				'price' => $result->getPrice(),
				'quantity' => $result->getQuantity()
			];
		}
		return $products;
	}

	/**
	 * [findProductById - finds a product by its id]
	 * @param  [integer] $id
	 * @return [array]
	 */
	public function findProductById($id)
	{
		$app = new Application();
		$result = $this->findOneBy(['id' => $id]);

		if(!$result) {
			throw new \Exception('Product not found');
		}

		$product[$result->getId()] = [
			'id' => $result->getId(),
			'companyId' => $result->getCompanyId(),
			'categoryId' => $result->getCategoryId(),
			'name' => $result->getName(),
			'description' => $result->getDescription(),
			'price' => $result->getPrice(),
			'quantity' => $result->getQuantity()
		];
		return $product;
	}

	/**
	 * finds all products that belong to a company
	 *
	 * @param  [integer] $companyId 
	 * @return [array] product objects
	 * @todo  Could be refactored as similar function is used in product repo
 	 */
	public function findProductsByCompanyId($companyId)
	{
		$app = new Application();
		$results = $this->createQueryBuilder('p')
			->select('p')
			->where('p.company = :company_id')
			->setParameter('company_id', $companyId)
			->getQuery()
			->getResult();
		
		foreach($results as $result) 
		{
			$products[] = array(
				'id' => $result->getId(),
				'companyId' => $result->getCompanyId(),
				'categoryId' => $result->getCategoryId(),
				'name' => $result->getName(),
				'description' => $result->getDescription(),
				'price' => $result->getPrice(),
				'quantity' => $result->getQuantity()
			);
		}
		return $products;
	}
}
