<?php

namespace Blog\Repository;

use Blog\Application;
use Blog\Entity\Company;
use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Persistence\ObjectManager;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository
{
	
	/**
	 * [findAllCompanies - finds all companies in the db]
	 * @return [array] [company objects]
	 */
	public function findAllCompanies()
	{
		$app = new Application();
		$results = $this->findAll();
		
		if(!$results) {
			throw new \Exception("Could not find all Companies");
		}

		foreach ($results as $result) 
		{	
			$addresses = $app['repository.address']->findCompanyAddresses($result->getId());
			$employees = $app['repository.employee']->findCompanyEmployees($result->getId());

			$companies[] = [
				'id' => $result->getId(),
				'name' => $result->getName(),
				'country' => $result->getCountry(),
				'city' => $result->getCity(),
				'postCode' => $result->getPostCode(),
				'regNo' => $result->getRegNo(),
				'regDate' => $result->getRegDate(),
				'taxNo' => $result->getTaxNo(),
				'branches' => $addresses,
				'website' => $result->getWebsite(),
				'employees' => $employees
			];
		}
		return $companies;
	}

	/**
	 * [findCompanyById - find a company by the id]
	 * @param  [integer] $id [company id]
	 * @return [array] [company object]
	 */
	public function findCompanyById($id)
	{
		$app = new Application();
		$result = $this->findOneBy(['id' => $id]);
		$address = $app['repository.address']->findCompanyAddresses($id);

		if(!$address || !$result) {
			throw new \Exception("The company id ( $id ) does'nt exist.");
		}

		$company = [
			'id' => $result->getId(),
			'name' => $result->getName(),
			'branches' => $address,
			'country' => $result->getCountry(),
			'city' => $result->getCity(),
			'postCode' => $result->getPostCode(),
			'regNo' => $result->getRegNo(),
			'regDate' => $result->getRegDate(),
			'taxNo' => $result->getTaxNo(),
			'website' => $result->getWebsite(),
		];
		
		return $company;
	}

	/**
	 * [findCompanyEmployees - find all of a companies employees]
	 * @param  [integer] $id [company id]
	 * @return [array] [company object]
	 */
	public function findCompanyEmployees($id)
	{
		$app = new Application();
		$employees = $app['repository.employee']->findEmployeesByCompanyId($id);
		$addresses = $app['repository.address']->findCompanyAddresses($id);
		$result = $this->findOneBy(['id' => $id]);
		
		if(!$employees) {
			throw new \Exception("Could not find company employees");			
		}

		$company = array(
				'id' => $result->getId(),
				'name' => $result->getName(),
				'address' => $addresses,
				'country' => $result->getCountry(),
				'city' => $result->getCity(),
				'postCode' => $result->getPostCode(),
				'regNo' => $result->getRegNo(),
				'regData' => $result->getRegDate(),
				'taxNo' => $result->getTaxNo(),
				'website' => $result->getWebsite(),
				'employees' => $employees
		);
		return $company;
	}

	/**
	 * [findCompanyProducts - finds all of a companies products]
	 * @param  [integer] $id
	 * @return [array]
	 */
	public function findCompanyProducts($id)
	{
		$app = new Application();
		$products = $app['repository.product']->findProductsByCompanyId($id);
		$addresses = $app['repository.address']->findCompanyAddresses($id);
		$result = $this->findOneBy(['id' => $id]);

		if(!$products) {
			throw new \Exception("Could not find company products");
		}

		$company[] = array(
				'id' => $result->getId(),
				'name' => $result->getName(),
				'address' => $addresses,
				'country' => $result->getCountry(),
				'city' => $result->getCity(),
				'postCode' => $result->getPostCode(),
				'regNo' => $result->getRegNo(),
				'regData' => $result->getRegDate(),
				'taxNo' => $result->getTaxNo(),
				'website' => $result->getWebsite(),
				'products' => $products
		);
		return $company;
	}

	public function createNewCompany($body)
	{		
		try {
			$app = new Application();
			$company = new Company();

			$company->setName($body->new_company->name);
			$company->setCountry($body->new_company->country);
			$company->setRegion($body->new_company->region);
			$company->setCity($body->new_company->city);
			$company->setStreet($body->new_company->street);
			$company->setPostCode($body->new_company->postCode);
			$company->setRegNo($body->new_company->regNo);
			$company->setRegDate(new \DateTime());
			$company->setTaxNo($body->new_company->taxNo);
			$company->setWebsite($body->new_company->website);

			$app['entityManager']->persist($company);
			$app['entityManager']->flush($company); 
			return $company->getId();
		} catch (\Exception $e) {
			echo $e->getMessage();
			throw new \Exception('The company entity was not created');
		}
	}
}
